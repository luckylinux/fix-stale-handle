#!/bin/bash

# Input Arguments
action=${1-""}

# If Systemd is stopping the Script, don't do anything else
if [[ "${action}" == "stop" ]]
then
    exit 0
fi

# Define default timeout
default_timeout=10 # [s]

# Define Command
command="ls -l"

# Define Filesystem Types
types="nfs,cifs"

# Ignore case in string comparisons
shopt -s nocasematch

# Find all filesystems of selected Types
# Ignore first Line by feeding Option -n (--no-headins)
mapfile -t shares < <( findmnt -n -l -s --types "${types}" --output TARGET )

# Get Children Dependencies
get_children_dependencies() {
    # Input Arguments
    local lmountpoint="$1"

    mapfile -t matches < <( findmnt -n -l -s --output SOURCE,TARGET )

    for match in "${matches[@]}"
    do
        # Get Source
        fs_source=$(echo "${match}" | awk '{print $1}')

        # Get Target
        fs_target=$(echo "${match}" | awk '{print $2}')

        # Exact Match
        if [[ "${lmountpoint}" == "${fs_source}" ]]
        then
           # Echo Value
           echo "${fs_target}"
        elif [[ "${fs_source}" == *"${lmountpoint}/"* ]]
        then
           # Echo Value
           echo "${fs_target}"
        fi
    done
}

# Get Parent Dependencies
get_parent_dependencies() {
    # Input Arguments
    local lmountpoint="$1"

    findmnt -n -l -s --output SOURCE "${lmountpoint}"
}

# Remount Dependencies
fix_children_dependencies() {
    # Input Arguments
    local lparent="$1"
    local lparentlevel=${2-"0"}

    # Get list of Children Dependencies
    local lchildren
    local lchild
    mapfile -t lchildren < <( get_children_dependencies "${lparent}" )

    # Determine Children Level
    local lchildlevel
    lchildlevel=$((lparentlevel+1))

    # Loop over Children
    for lchild in "${lchildren[@]}"
    do
        # Fix Stale
        fix_stale "${lchild}" "${lchildlevel}"
    done
}

# Format Indent for Dependencies
format_indent() {
    # Input Arguments
    local llevel="$1"

    # Declare Sting
    local lstr

    # Initialize String
    lstr=""

    # Add Tabs for each Level
    for i in $(seq 0 $((llevel-1)))
    do
        lstr+="\t"
    done

    # Return Value
    echo -e "${lstr}"
}

# Fix Stale
fix_stale() {
    # Input Arguments
    local lshare="$1"
    local llevel=${2-"0"}

    # Get Indent String
    local lindent1
    local lindent2
    lindent1=$(format_indent $((llevel+0)))
    lindent2=$(format_indent $((llevel+1)))

    # Echo
    echo -e "${lindent1}Analysing Network Share <${lshare}>"

    # Assume it's NOT stale
    stale=0

    # Detection
    description=""

    # Attempt to get list of files in share
    output=$(timeout ${default_timeout}s $command "${lshare}" 2>&1)

    # Return Code
    ret=$?

    # Echo Return Code in case of Abnormalities (Return Code != 0)
    if [[ $ret -ne 0 ]]
    then
         echo -e "${lindent2}Return Code of <timeout ${default_timeout}s $command ${lshare}>: $ret"
    fi


    # Analyze Return Codes & Output
    if [[ $ret -eq 124 ]]
    then
        # Command timed out
        # Assume IS stale file handle
        # Specific to NFS
        stale=1
        description="Stale file handle assumed"
    elif [[ $ret -eq 137 ]]
    then
        # Command timed out and had to be killed
        # Assume IS stale file handle
        # Specific to NFS
        stale=1
        description="Stale file handle assumed"
    elif [[ $ret -eq 0 ]]
    then
        # Command was executed successfully and exit code is normal
        # NOT stale file handle
        stale=0
        description="Return Code was Normal"
    else
        # Analyse Output
        # Transform to lowercase first
        # If it contains "stale file handle" then we must also flag the share
        if [[ "$output" == *"Stale file handle"* ]]
        then
             # Specific to NFS
             # IS Stale file handle
             stale=1
             description="Stale file handle positively detected (NFS)"
        elif [[ "$output" == *"Resource temporarily unavailable"* ]]
        then
             # IS Stale file handle
             # Specific to SMB/CIFS
             stale=1
             description="Stale file handle positively detected (CIFS/SMB)"
        fi
    fi

    # Check if Stale
    if [[ $stale -eq 1 ]]
    then
        echo -e "${lindent2}${description}"
        echo -e "${lindent2}Unmounting ${lshare}"
        umount -f -l "${lshare}"
        sleep 5

        echo -e "${lindent2}Re-mounting ${lshare}"
        mount "${lshare}"
        sleep 5
    else
       if mountpoint -q "${share}"
       then
          echo -e "${lindent2}Share ${lshare} appears normal and mounted. No action required."
       else
          echo -e "${lindent2}Share ${lshare} was not previously mounted. Maybe a remount attempt after the previous stale file handle failed ?"
          echo -e "${lindent2}Remounting now ..."
          mount "${lshare}"
          sleep 5
       fi
    fi

    # Fix Stale for Children Dependencies
    # This will execute Recursively
    fix_children_dependencies "${lshare}" "${llevel}"
}

# For each share
for share in "${shares[@]}"
do
    # Fix Stale for Share itself
    fix_stale "${share}"

    # Fix Stale for Children Dependencies
    # This will NOT execute Recursively
    # fix_children_dependencies "${share}"
done

# Exit Gracefully
exit 0
